nox_range <- range(pin$nox_mi, gru$nox_mi,camp$nox_mi, sbc$nox_mi)
iso_index_range <- range(iso[, 2:6])
# Creating a function to plot poluttant vs isolation index
PlotPolIso <- function(cet, iso, pol, city, title, legend.pos = 'topleft'){
par(mar = c(5, 4, 4, 4) + 0.3)
plot(cet[['date']], cet[[pol]], t = 'l', lwd = 3,
ylim = range(pin[[pol]], gru[[pol]],camp[[pol]], sbc[[pol]]),
col = 'dodgerblue2',
ylab = expression("NO"[X] * " (" * mu * "g/m" ^3 * ")"),
xlab = '2020',
main = title)
points(cet[['date']], cet[[pol]], col = 'dodgerblue2', pch = 19)
par(new = T)
plot(cet[['date']],iso[[city]], t = 'l', lwd = 3,
ylim = c(35, 65),  col = 'chocolate2', ylab = '', xlab = '', axes =F)
points(cet[['date']], iso[[city]], col = 'chocolate2', pch = 19)
axis(4)
axis(1, at = 1:7, label =6:12)
mtext("Isolation index (%)", side=4, line=3)
legend(legend.pos, lwd = 2.5, lty = 1, col = c('dodgerblue2', 'chocolate2'),
legend = c('NOx', 'Isolation index'), bty = 'n')
box()
}
png('03_output_figs/nox_vs_iso_index.png', height = 710, width = 1000)
par(mfrow = c(2, 2))
PlotPolIso(pin, iso_index, 'nox_mi', 'sp', 'Pinheiros', 'bottomright')
PlotPolIso(gru, iso_index, 'nox_mi', 'gru', 'Guarulhos')
PlotPolIso(camp, iso_index, 'nox_mi', 'camp', 'Campinas')
PlotPolIso(sbc, iso_index, 'nox_mi', 'sbc', 'Sao Bernardo do Campo')
dev.off()
library(openair)
library(data.table)
# Loading pollutant information for all cetesb stations in Sao Paulo state
cetesb_data <- readRDS("./02_data/raw_data/cetesb_010320_140420.Rds")
# Selecting study period
cetesb <- lapply(cetesb_data, function(df) selectByDate(df, start = "17/03/2020", end = "13/04/2020"))
# Calculating nox
cetesb <- lapply(cetesb, function(df) {
df$nox_mi <- df$no + df$no2 # nox in ug/m3
return(df)})
# Calculating daily average
cetesb_mean_day <- lapply(cetesb, function(df) timeAverage(df, avg.time = "day"))
# Reading isolation index data
# This file is a processed version of Taxa-Isolamento-por-Município_14Abr-3.xlsx
# With no header, in CSV and filtered by 5 most populated cities.
iso_index <- fread('02_data/processed_data/isolation_index_five_mun_sp_170320_130420.csv',
dec = ',', header=F, sep =';')
# Pivoting table, original data has day as columns
iso_index <- dcast(melt(iso_index, id.vars = "V1"), variable ~ V1)
names(iso_index) <- c( 'var','camp', 'gru', 'sbc', 'sjc', 'sp')
# Selecting cetesb daily mean
pin <- cetesb_mean_day[[44]] # Pinheiros
gru <- cetesb_mean_day[[24]] # Gurarulhos
camp <- cetesb_mean_day[[7]] # Campinas
sbc <- cetesb_mean_day[[52]] # Sao Bernardo do Campo
sjc <- cetesb_mean_day[[54]] # Sao Jose dos Campos
# Getting NOX min and max values
nox_range <- range(pin$nox_mi, gru$nox_mi,camp$nox_mi, sbc$nox_mi)
iso_index_range <- range(iso[, 2:6])
# Creating a function to plot poluttant vs isolation index
PlotPolIso <- function(cet, iso, pol, city, title, legend.pos = 'topleft'){
par(mar = c(5, 4, 4, 4) + 0.3)
plot(cet[['date']], cet[[pol]], t = 'l', lwd = 3,
ylim = range(pin[[pol]], gru[[pol]],camp[[pol]], sbc[[pol]]),
col = 'dodgerblue2',
ylab = expression("NO"[X] * " (" * mu * "g/m" ^3 * ")"),
xlab = '2020',
main = title)
points(cet[['date']], cet[[pol]], col = 'dodgerblue2', pch = 19)
par(new = T)
plot(cet[['date']],iso[[city]], t = 'l', lwd = 3,
ylim = c(35, 65),  col = 'chocolate2', ylab = '', xlab = '', axes =F)
points(cet[['date']], iso[[city]], col = 'chocolate2', pch = 19)
axis(4)
axis(1, at = 1:7, label =6:12)
mtext("Isolation index (%)", side=4, line=3)
legend(legend.pos, lwd = 2.5, lty = 1, col = c('dodgerblue2', 'chocolate2'),
legend = c('NOx', 'Isolation index'), bty = 'n')
box()
}
png('03_output_figs/nox_vs_iso_index.png', height = 710, width = 1000)
par(mfrow = c(2, 2))
PlotPolIso(pin, iso_index, 'nox_mi', 'sp', 'Pinheiros', 'bottomright')
PlotPolIso(gru, iso_index, 'nox_mi', 'gru', 'Guarulhos')
PlotPolIso(camp, iso_index, 'nox_mi', 'camp', 'Campinas')
PlotPolIso(sbc, iso_index, 'nox_mi', 'sbc', 'Sao Bernardo do Campo')
dev.off()
cetesb_data[[52]]
cetesb_data[[54]]
cetesb_data[[24]]
cetesb_data[[44]]
library(openair)
library(data.table)
# Loading pollutant information for all cetesb stations in Sao Paulo state
cetesb_data <- readRDS("./02_data/raw_data/cetesb_010320_140420.Rds")
# Selecting study period
cetesb <- lapply(cetesb_data, function(df) selectByDate(df, start = "17/03/2020", end = "13/04/2020"))
# Calculating nox
cetesb <- lapply(cetesb, function(df) {
df$nox_mi <- df$no + df$no2 # nox in ug/m3
return(df)})
# Calculating daily average
cetesb_mean_day <- lapply(cetesb, function(df) timeAverage(df, avg.time = "day"))
# Reading isolation index data
# This file is a processed version of Taxa-Isolamento-por-Município_14Abr-3.xlsx
# With no header, in CSV and filtered by 5 most populated cities.
iso_index <- fread('02_data/processed_data/isolation_index_five_mun_sp_170320_130420.csv',
dec = ',', header=F, sep =';')
# Pivoting table, original data has day as columns
iso_index <- dcast(melt(iso_index, id.vars = "V1"), variable ~ V1)
names(iso_index) <- c( 'var','camp', 'gru', 'sbc', 'sjc', 'sp')
# Selecting cetesb daily mean
pin <- cetesb_mean_day[[44]] # Pinheiros
gru <- cetesb_mean_day[[24]] # Gurarulhos
camp <- cetesb_mean_day[[7]] # Campinas
sbc <- cetesb_mean_day[[52]] # Sao Bernardo do Campo
sjc <- cetesb_mean_day[[54]] # Sao Jose dos Campos
# Getting NOX min and max values
nox_range <- range(pin$nox_mi, gru$nox_mi,camp$nox_mi, sbc$nox_mi)
iso_index_range <- range(iso[, 2:6])
# Creating a function to plot poluttant vs isolation index
PlotPolIso <- function(cet, iso, pol, city, title, legend.pos = 'topleft'){
par(mar = c(5, 4, 4, 4) + 0.3)
plot(cet[['date']], cet[[pol]], t = 'l', lwd = 3,
ylim = range(pin[[pol]], gru[[pol]],camp[[pol]], sbc[[pol]]),
col = 'dodgerblue2',
ylab = expression("NO"[X] * " (" * mu * "g/m" ^3 * ")"),
xlab = '2020',
main = title)
points(cet[['date']], cet[[pol]], col = 'dodgerblue2', pch = 19)
par(new = T)
plot(cet[['date']],iso[[city]], t = 'l', lwd = 3,
ylim = c(35, 65),  col = 'chocolate2', ylab = '', xlab = '', axes =F)
points(cet[['date']], iso[[city]], col = 'chocolate2', pch = 19)
axis(4)
axis(1, at = 1:7, label =6:12)
mtext("Isolation index (%)", side=4, line=3)
legend(legend.pos, lwd = 2.5, lty = 1, col = c('dodgerblue2', 'chocolate2'),
legend = c('NOx', 'Isolation index'), bty = 'n')
box()
}
png('03_output_figs/nox_vs_iso_index.png', height = 710, width = 1000)
par(mfrow = c(2, 2))
PlotPolIso(pin, iso_index, 'nox_mi', 'sp', 'Pinheiros', 'bottomright')
PlotPolIso(gru, iso_index, 'nox_mi', 'gru', 'Guarulhos')
PlotPolIso(camp, iso_index, 'nox_mi', 'camp', 'Campinas')
PlotPolIso(sbc, iso_index, 'nox_mi', 'sbc', 'Sao Bernardo do Campo')
dev.off()
# Loading pollutant information for all cetesb stations
cetesb_data <- readRDS("02_data/raw_data/cetesb_010320_140420.Rds")
# Function to write station data in csv
WriteStationData<- function(df){
station_name <- unique(na.omit(df$est))
station_name <- iconv(station_name, from = "UTF-8", to = "ASCII//TRANSLIT") # Change spetial characters
station_name <- gsub(" ", "_", station_name) # Removing empty spaces in station_name
path <- "./02_data/cetesb_data/"
file_name <- paste0(path, station_name, "_010320-140420.csv")
write.table(df, file_name, quote = F, row.names = F, sep = ',')
}
lapply(cetesb_data, WriteStationData)
library('openair')
# Location of input files and output directory
cetesb_data_file  <- "02_data/raw_data/cetesb_masp_010320_140420.Rds"
cetesb_station_file <- "02_data/processed_data/cetesb_masp_aqs_lat_lon.csv"
output_dir <-  "02_data/processed_data/"
# Loading pollutant information for cetesb stations inside metropolitan area of sao paulo (MASP)
cetesb_data <- readRDS(cetesb_data_file)
# Loading cetesb station latitude and longitude
cetesb_latlon <- read.table(cetesb_station_file,
header = T, stringsAsFactors = F,
sep = ',', dec = '.')
# Selecting dates
cetesb_sem <- lapply(cetesb_data,
function(df) selectByDate(df, start = "15/03/2020", end = "21/03/2020")) # Week with no restrictions
cetesb_w1 <- lapply(cetesb_data,
function(df) selectByDate(df, start = "22/03/2020", end = "28/03/2020")) # First week quarantine
cetesb_w2 <- lapply(cetesb_data,
function(df) selectByDate(df, start = "29/03/2020", end = "04/04/2020")) # Second week of quarantine
cetesb_w3 <- lapply(cetesb_data,
function(df) selectByDate(df, start = '05/04/2020', end = "11/04/2020")) # Third week of quarantine
# Calculating NOX in ug/m3
cetesb_sem <- lapply(cetesb_sem, function(df) {
df$nox_mi <- df$no + df$no2
return(df)
})
cetesb_w1 <- lapply(cetesb_w1, function(df) {
df$nox_mi <- df$no + df$no2
return(df)
})
cetesb_w2 <- lapply(cetesb_w2, function(df) {
df$nox_mi <- df$no + df$no2
return(df)
})
cetesb_w3 <- lapply(cetesb_w3, function(df) {
df$nox_mi <- df$no + df$no2
return(df)
})
# Calculating mean for each period
sem_mean <- lapply(cetesb_sem, function(df) colMeans(df[c(2:8, 10)], na.rm = T))
w1_mean <- lapply(cetesb_w1, function(df) colMeans(df[c(2:8, 10)], na.rm = T))
w2_mean <- lapply(cetesb_w2, function(df) colMeans(df[c(2:8, 10)], na.rm = T))
w3_mean <- lapply(cetesb_w3, function(df) colMeans(df[c(2:8, 10)], na.rm = T))
# Merging all pollutan mean for each air quality station (aqs) in one dataframe
aqs_sem <- as.data.frame(do.call(rbind, sem_mean))
aqs_w1 <- as.data.frame(do.call(rbind, w1_mean))
aqs_w2 <- as.data.frame(do.call(rbind, w2_mean))
aqs_w3 <- as.data.frame(do.call(rbind, w3_mean))
# Calculating differences in %
dif_w1_sem <- (aqs_w1 - aqs_sem) / aqs_sem * 100 # 1st week of quarantine vs Week we no restriction
dif_w2_w1 <- (aqs_w2 - aqs_w1) / aqs_w1 * 100 # 2nd week of quarantine vs 1st Week of quarantine
dif_w3_w1 <- (aqs_w3 - aqs_w1) / aqs_w1 * 100 # 3th week of quarantine vs 1st Week of quarantine
dif_w1_sem_lalo <- cbind(cetesb_latlon, dif_w1_sem)
dif_w2_w1_lalo <- cbind(cetesb_latlon, dif_w2_w1)
dif_w3_w1_lalo <- cbind(cetesb_latlon, dif_w3_w1)
# These outputs will be read by map map_cetesb_aqs_week_mean.py
write.table(dif_w1_sem_lalo, paste0(output_dir, "dif_w1_sem.csv"),
sep = ',', row.names = F, quote = F)
write.table(dif_w2_w1_lalo, paste0(output_dir, "dif_w2_w1.csv"),
sep = ',', row.names = F, quote = F)
write.table(dif_w3_w1_lalo, paste0(output_dir, "dif_w3_w1.csv"),
sep = ',', row.names = F, quote = F)
sessionInfo()
library(openair)
library(data.table)
sessionInfo()
source("01_scripts/01_calculate_masp_aqs_mean_difference.R")
system("python 01_scripts/02_plot_map_masp_aqs_mean_difference.py")
system("which python")
system("python --version")
# Create Suplementary Fig1: NOX concentration vs Isolation Index
source("01_scripts/03_plot_nox_vs_isolation_index.R")
# Create Suplementary Fig1: NOX concentration vs Isolation Index
source("01_scripts/03_plot_nox_vs_isolation_index.R")
library(openair)
library(data.table)
# Location of input files and output directory
cetesb_data_file  <- "02_data/raw_data/cetesb_010320_140420.Rds"
isolation_index_file <- "02_data/processed_data/isolation_index_five_mun_sp_170320_130420.csv"
output_dir <- "03_output_figs/"
# Loading pollutant information for all cetesb stations in Sao Paulo state
cetesb_data <- readRDS(cetesb_data_file)
# Selecting study period
cetesb <- lapply(cetesb_data, function(df) selectByDate(df, start = "17/03/2020", end = "13/04/2020"))
# Calculating nox
cetesb <- lapply(cetesb, function(df) {
df$nox_mi <- df$no + df$no2 # nox in ug/m3
return(df)})
# Calculating daily average
cetesb_mean_day <- lapply(cetesb, function(df) timeAverage(df, avg.time = "day"))
# Reading isolation index data
# This file is a processed version of Taxa-Isolamento-por-Município_14Abr-3.xlsx
# With no header, in CSV and filtered by 5 most populated cities.
iso_index <- fread(isolation_index_file,
dec = ',', header=F, sep =';')
# Pivoting table, original data has day as columns
iso_index <- dcast(melt(iso_index, id.vars = "V1"), variable ~ V1)
names(iso_index) <- c( 'var','camp', 'gru', 'sbc', 'sjc', 'sp')
# Selecting cetesb daily mean
pin <- cetesb_mean_day[[44]] # Pinheiros
gru <- cetesb_mean_day[[24]] # Gurarulhos
camp <- cetesb_mean_day[[7]] # Campinas
sbc <- cetesb_mean_day[[52]] # Sao Bernardo do Campo
sjc <- cetesb_mean_day[[54]] # Sao Jose dos Campos
# Getting NOX min and max values
nox_range <- range(pin$nox_mi, gru$nox_mi,camp$nox_mi, sbc$nox_mi)
iso_index_range <- range(iso[, 2:6])
# Creating a function to plot poluttant vs isolation index
PlotPolIso <- function(cet, iso, pol, city, title, legend.pos = 'topleft'){
par(mar = c(5, 4, 4, 4) + 0.3)
plot(cet[['date']], cet[[pol]], t = 'l', lwd = 3,
ylim = range(pin[[pol]], gru[[pol]],camp[[pol]], sbc[[pol]]),
col = 'dodgerblue2',
ylab = expression("NO"[X] * " (" * mu * "g/m" ^3 * ")"),
xlab = '2020',
main = title)
points(cet[['date']], cet[[pol]], col = 'dodgerblue2', pch = 19)
par(new = T)
plot(cet[['date']],iso[[city]], t = 'l', lwd = 3,
ylim = c(35, 65),  col = 'chocolate2', ylab = '', xlab = '', axes =F)
points(cet[['date']], iso[[city]], col = 'chocolate2', pch = 19)
axis(4)
axis(1, at = 1:7, label =6:12)
mtext("Isolation index (%)", side=4, line=3)
legend(legend.pos, lwd = 2.5, lty = 1, col = c('dodgerblue2', 'chocolate2'),
legend = c('NOx', 'Isolation index'), bty = 'n')
box()
}
png(paste0(output_dir, "nox_vs_iso_index.png"), height = 710, width = 1000)
par(mfrow = c(2, 2))
PlotPolIso(pin, iso_index, 'nox_mi', 'sp', 'Pinheiros', 'bottomright')
PlotPolIso(gru, iso_index, 'nox_mi', 'gru', 'Guarulhos')
PlotPolIso(camp, iso_index, 'nox_mi', 'camp', 'Campinas')
PlotPolIso(sbc, iso_index, 'nox_mi', 'sbc', 'Sao Bernardo do Campo')
dev.off()
source("01_scripts/01_calculate_masp_aqs_mean_difference.R")
system("python 01_scripts/02_plot_map_masp_aqs_mean_difference.py")
# Create Suplementary Fig1: NOX concentration vs Isolation Index
source("01_scripts/03_plot_nox_vs_isolation_index.R")
source("01_scripts/01_calculate_masp_aqs_mean_difference.R")
system("python 01_scripts/02_plot_map_masp_aqs_mean_difference.py")
# Create Suplementary Fig1: NOX concentration vs Isolation Index
source("01_scripts/03_plot_nox_vs_isolation_index.R")
# Create Fig2 : Spatial Comparison
source("01_scripts/01_calculate_masp_aqs_mean_difference.R")
system("python 01_scripts/02_plot_map_masp_aqs_mean_difference.py")
# Create Suplementary Fig1: NOX concentration vs Isolation Index
source("01_scripts/03_plot_nox_vs_isolation_index.R")
system("python 01_scripts/02_plot_map_masp_aqs_mean_difference.py")
install.packages("reticulate")
library(reticulate)
Sys.which('python')
use_python("~/miniconda3/bin/python")
system("python 01_scripts/02_plot_map_masp_aqs_mean_difference.py")
source_python("01_scripts/02_plot_map_masp_aqs_mean_difference.py")
use_python("~/miniconda3/bin/python")
source_python("01_scripts/02_plot_map_masp_aqs_mean_difference.py")
source("01_scripts/01_calculate_masp_aqs_mean_difference.R")
source_python("01_scripts/02_plot_map_masp_aqs_mean_difference.py")
system("01_scripts/02_plot_map_masp_aqs_mean_difference.py")
system("01_scripts/02_plot_map_masp_aqs_mean_difference.py")
source("01_scripts/01_calculate_masp_aqs_mean_difference.R")
system("python 01_scripts/02_plot_map_masp_aqs_mean_difference.py")
source("01_scripts/01_calculate_masp_aqs_mean_difference.R")
system("python 01_scripts/02_plot_map_masp_aqs_mean_difference.py")
system("python 01_scripts/02_plot_map_masp_aqs_mean_difference.py")
reticulate::import()?
cfafsd
?reticulate::import()
library('openair')
# Location of input files and output directory
cetesb_data_file  <- "02_data/raw_data/cetesb_masp_010320_140420.Rds"
cetesb_station_file <- "02_data/processed_data/cetesb_masp_aqs_lat_lon.csv"
output_dir <-  "02_data/processed_data/"
# Loading pollutant information for cetesb stations inside metropolitan area of sao paulo (MASP)
cetesb_data <- readRDS(cetesb_data_file)
# Loading cetesb station latitude and longitude
cetesb_latlon <- read.table(cetesb_station_file,
header = T, stringsAsFactors = F,
sep = ',', dec = '.')
# Selecting dates
cetesb_sem <- lapply(cetesb_data,
function(df) selectByDate(df, start = "15/03/2020", end = "21/03/2020")) # Week with no restrictions
cetesb_w1 <- lapply(cetesb_data,
function(df) selectByDate(df, start = "22/03/2020", end = "28/03/2020")) # First week quarantine
cetesb_w2 <- lapply(cetesb_data,
function(df) selectByDate(df, start = "29/03/2020", end = "04/04/2020")) # Second week of quarantine
cetesb_w3 <- lapply(cetesb_data,
function(df) selectByDate(df, start = '05/04/2020', end = "11/04/2020")) # Third week of quarantine
# Calculating NOX in ug/m3
cetesb_sem <- lapply(cetesb_sem, function(df) {
df$nox_mi <- df$no + df$no2
return(df)
})
cetesb_w1 <- lapply(cetesb_w1, function(df) {
df$nox_mi <- df$no + df$no2
return(df)
})
cetesb_w2 <- lapply(cetesb_w2, function(df) {
df$nox_mi <- df$no + df$no2
return(df)
})
cetesb_w3 <- lapply(cetesb_w3, function(df) {
df$nox_mi <- df$no + df$no2
return(df)
})
# Calculating mean for each period
sem_mean <- lapply(cetesb_sem, function(df) colMeans(df[c(2:8, 10)], na.rm = T))
w1_mean <- lapply(cetesb_w1, function(df) colMeans(df[c(2:8, 10)], na.rm = T))
w2_mean <- lapply(cetesb_w2, function(df) colMeans(df[c(2:8, 10)], na.rm = T))
w3_mean <- lapply(cetesb_w3, function(df) colMeans(df[c(2:8, 10)], na.rm = T))
# Merging all pollutan mean for each air quality station (aqs) in one dataframe
aqs_sem <- as.data.frame(do.call(rbind, sem_mean))
aqs_w1 <- as.data.frame(do.call(rbind, w1_mean))
aqs_w2 <- as.data.frame(do.call(rbind, w2_mean))
aqs_w3 <- as.data.frame(do.call(rbind, w3_mean))
# Calculating differences in %
dif_w1_sem <- (aqs_w1 - aqs_sem) / aqs_sem * 100 # 1st week of quarantine vs Week we no restriction
dif_w2_w1 <- (aqs_w2 - aqs_w1) / aqs_w1 * 100 # 2nd week of quarantine vs 1st Week of quarantine
dif_w3_w1 <- (aqs_w3 - aqs_w1) / aqs_w1 * 100 # 3th week of quarantine vs 1st Week of quarantine
dif_w1_sem_lalo <- cbind(cetesb_latlon, dif_w1_sem)
dif_w2_w1_lalo <- cbind(cetesb_latlon, dif_w2_w1)
dif_w3_w1_lalo <- cbind(cetesb_latlon, dif_w3_w1)
# These outputs will be read by map map_cetesb_aqs_week_mean.py
write.table(dif_w1_sem_lalo, paste0(output_dir, "dif_w1_sem.csv"),
sep = ',', row.names = F, quote = F)
write.table(dif_w2_w1_lalo, paste0(output_dir, "dif_w2_w1.csv"),
sep = ',', row.names = F, quote = F)
write.table(dif_w3_w1_lalo, paste0(output_dir, "dif_w3_w1.csv"),
sep = ',', row.names = F, quote = F)
library(openair)
library(data.table)
# Location of input files and output directory
cetesb_data_file  <- "./02_data/raw_data/cetesb_010320_140420.Rds"
isolation_index_file <- "./02_data/processed_data/isolation_index_five_mun_sp_170320_130420.csv"
output_dir <- "./03_output_figs/"
# Loading pollutant information for all cetesb stations in Sao Paulo state
cetesb_data <- readRDS(cetesb_data_file)
# Selecting study period
cetesb <- lapply(cetesb_data, function(df) selectByDate(df, start = "17/03/2020", end = "13/04/2020"))
# Calculating nox
cetesb <- lapply(cetesb, function(df) {
df$nox_mi <- df$no + df$no2 # nox in ug/m3
return(df)})
# Calculating daily average
cetesb_mean_day <- lapply(cetesb, function(df) timeAverage(df, avg.time = "day"))
# Reading isolation index data
# This file is a processed version of Taxa-Isolamento-por-Município_14Abr-3.xlsx
# With no header, in CSV and filtered by 5 most populated cities.
iso_index <- fread(isolation_index_file,
dec = ',', header=F, sep =';')
# Pivoting table, original data has day as columns
iso_index <- dcast(melt(iso_index, id.vars = "V1"), variable ~ V1)
names(iso_index) <- c( 'var','camp', 'gru', 'sbc', 'sjc', 'sp')
# Selecting cetesb daily mean
pin <- cetesb_mean_day[[44]] # Pinheiros
gru <- cetesb_mean_day[[24]] # Gurarulhos
camp <- cetesb_mean_day[[7]] # Campinas
sbc <- cetesb_mean_day[[52]] # Sao Bernardo do Campo
sjc <- cetesb_mean_day[[54]] # Sao Jose dos Campos
# Getting NOX min and max values
nox_range <- range(pin$nox_mi, gru$nox_mi,camp$nox_mi, sbc$nox_mi)
iso_index_range <- range(iso_index[, 2:6])
# Creating a function to plot poluttant vs isolation index
PlotPolIso <- function(cet, iso, pol, city, title, legend.pos = 'topleft'){
par(mar = c(5, 4, 4, 4) + 0.3)
plot(cet[['date']], cet[[pol]], t = 'l', lwd = 3,
ylim = range(pin[[pol]], gru[[pol]],camp[[pol]], sbc[[pol]]),
col = 'dodgerblue2',
ylab = expression("NO"[X] * " (" * mu * "g/m" ^3 * ")"),
xlab = '2020',
main = title)
points(cet[['date']], cet[[pol]], col = 'dodgerblue2', pch = 19)
par(new = T)
plot(cet[['date']],iso[[city]], t = 'l', lwd = 3,
ylim = c(35, 65),  col = 'chocolate2', ylab = '', xlab = '', axes =F)
points(cet[['date']], iso[[city]], col = 'chocolate2', pch = 19)
axis(4)
axis(1, at = 1:7, label =6:12)
mtext("Isolation index (%)", side=4, line=3)
legend(legend.pos, lwd = 2.5, lty = 1, col = c('dodgerblue2', 'chocolate2'),
legend = c('NOx', 'Isolation index'), bty = 'n')
box()
}
png(paste0(output_dir, "nox_vs_iso_index.png"), height = 710, width = 1000)
par(mfrow = c(2, 2))
PlotPolIso(pin, iso_index, 'nox_mi', 'sp', 'Pinheiros', 'bottomright')
PlotPolIso(gru, iso_index, 'nox_mi', 'gru', 'Guarulhos')
PlotPolIso(camp, iso_index, 'nox_mi', 'camp', 'Campinas')
PlotPolIso(sbc, iso_index, 'nox_mi', 'sbc', 'Sao Bernardo do Campo')
dev.off()
rm(list = ls())
library(openair)
library(data.table)
# Location of input files and output directory
cetesb_data_file  <- "./02_data/raw_data/cetesb_010320_140420.Rds"
isolation_index_file <- "./02_data/processed_data/isolation_index_five_mun_sp_170320_130420.csv"
output_dir <- "./03_output_figs/"
# Loading pollutant information for all cetesb stations in Sao Paulo state
cetesb_data <- readRDS(cetesb_data_file)
# Selecting study period
cetesb <- lapply(cetesb_data, function(df) selectByDate(df, start = "17/03/2020", end = "13/04/2020"))
# Calculating nox
cetesb <- lapply(cetesb, function(df) {
df$nox_mi <- df$no + df$no2 # nox in ug/m3
return(df)})
# Calculating daily average
cetesb_mean_day <- lapply(cetesb, function(df) timeAverage(df, avg.time = "day"))
# Reading isolation index data
# This file is a processed version of Taxa-Isolamento-por-Município_14Abr-3.xlsx
# With no header, in CSV and filtered by 5 most populated cities.
iso_index <- fread(isolation_index_file,
dec = ',', header=F, sep =';')
# Pivoting table, original data has day as columns
iso_index <- dcast(melt(iso_index, id.vars = "V1"), variable ~ V1)
names(iso_index) <- c( 'var','camp', 'gru', 'sbc', 'sjc', 'sp')
# Selecting cetesb daily mean
pin <- cetesb_mean_day[[44]] # Pinheiros
gru <- cetesb_mean_day[[24]] # Gurarulhos
camp <- cetesb_mean_day[[7]] # Campinas
sbc <- cetesb_mean_day[[52]] # Sao Bernardo do Campo
sjc <- cetesb_mean_day[[54]] # Sao Jose dos Campos
# Getting NOX min and max values
nox_range <- range(pin$nox_mi, gru$nox_mi,camp$nox_mi, sbc$nox_mi)
iso_index_range <- range(iso_index[, 2:6])
# Creating a function to plot poluttant vs isolation index
PlotPolIso <- function(cet, iso, pol, city, title, legend.pos = 'topleft'){
par(mar = c(5, 4, 4, 4) + 0.3)
plot(cet[['date']], cet[[pol]], t = 'l', lwd = 3,
ylim = range(pin[[pol]], gru[[pol]],camp[[pol]], sbc[[pol]]),
col = 'dodgerblue2',
ylab = expression("NO"[X] * " (" * mu * "g/m" ^3 * ")"),
xlab = '2020',
main = title)
points(cet[['date']], cet[[pol]], col = 'dodgerblue2', pch = 19)
par(new = T)
plot(cet[['date']],iso[[city]], t = 'l', lwd = 3,
ylim = c(35, 65),  col = 'chocolate2', ylab = '', xlab = '', axes =F)
points(cet[['date']], iso[[city]], col = 'chocolate2', pch = 19)
axis(4)
axis(1, at = 1:7, label =6:12)
mtext("Isolation index (%)", side=4, line=3)
legend(legend.pos, lwd = 2.5, lty = 1, col = c('dodgerblue2', 'chocolate2'),
legend = c('NOx', 'Isolation index'), bty = 'n')
box()
}
png(paste0(output_dir, "nox_vs_iso_index.png"), height = 710, width = 1000)
par(mfrow = c(2, 2))
PlotPolIso(pin, iso_index, 'nox_mi', 'sp', 'Pinheiros', 'bottomright')
PlotPolIso(gru, iso_index, 'nox_mi', 'gru', 'Guarulhos')
PlotPolIso(camp, iso_index, 'nox_mi', 'camp', 'Campinas')
PlotPolIso(sbc, iso_index, 'nox_mi', 'sbc', 'Sao Bernardo do Campo')
dev.off()
